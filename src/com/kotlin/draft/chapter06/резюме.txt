
    Управление поддержкой null в языке Kotlin помогает выявить возможные исключения
    NullPointerException на этапе компиляции.

    Для работы со значениями null в Kotlin есть специальные инструменты: оператор
    безопасного вызова (?.), оператор "Элвис" (?:), утверждение, что значение не
    равно null (!!), и функция let.

    Оператор as? позволяет привести значения к типу и обрабатывать случаи, когда оно
    имеет несовместимый тип.

    Типы, пришедшие из Java, интерпретируются в Kotlin как платформенные типы, что
    позволяет разработчику относится к ним как к типам с поддержкой или без
    поддержки null.

    Типы, представляющие обычные числа (например, Int), выглядят и функционируют
    как рядовые классы, но обычно комилируются в простые типы Java.

    Простые типы с поддержкой null (такие как Int?) соответствуют оберткам простых
    типов в Java (таким как java.lang.Integer).

    Тип Any - это супертип всех других типов и аналог типа Object в Java. А тип
    Unit - аналог void.

    Тип Nothing используется в качестве возвращаемого значения функций, которые в
    обычном режиме не завершаются.

    Для представления коллекций Kotlin использует стандартные классы Java, но делит
    их на доступные только для чтения и для чтения/записи.

    При наследовании Java-классов и реализации Java-интерфейсов в Kotlin нужно
    обращать пристальное внимание на возможность изменения и допустимость
    значения null.

    Класс Array в Kotlin выглядит как обычный обобщенный класс, но компилируется
    в Java-массив.

    Массивы простых типов представлены специальными классами, такими как IntArray.
    