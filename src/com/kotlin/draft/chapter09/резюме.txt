
    Поддержка обобщенных типов в Kotlin очень похожа на аналогичную
    поддержку в Java - она позволяет объявлять обобщенные функции
    или классы тем же способом.

    Как и в Java, аргументы обобщенных типов существуют только на
    этапе компиляции.

    Вы не можете использовать типы с аргументами вместе с оператором is,
    потому что типовые аргументы стираются во время выполнения.

    Типовые параметры встраиваемых (inline) функций можно объявить
    овеществляемыми, что позволит использовать их во время выполнения
    для проверок и получени экземпляров java.lang.Class.

    Вариантность позволяет определить, является ли один из двух
    обобщенных типов с одним и тем же базовым классом и разными типовыми
    аргументами, подтипом или супертипом другого, если один из типовых
    аргументов является подтипом другого. Класс можно объявить ковариантным
    по типовому параметру, если параметр используется только в исходящих
    позициях.

    Противоположное верно для контравариантных случаев: класс можно
    объявить контравариантным по типовому параметру, если он используется
    только во входящих позициях.

    Неизменяемый интерфейс List в Kotlin объявлен ковариантным, а это
    означает, что List<String> -это подтип List<Any>.

    Интерфейс функции объявлен контравариантным по первому типовому параметру
    и контравариантным по второму, что делает (Animal)->Int подтипом (Cat)->Number.

    Kotlin позволяет объявлять вариантность и для обощенного класса в целом
    (вариантность в месте объявления, declaration-site variance), и в месте
    конкретного использования обобщенного типа (use-site variance).

    Синтаксис вариантности со звездочкой можно использовать, когда
    типовой аргумент неизвестен или неважен.