
    Внутренние предметно-ориентированные языки - это шаблон проектирования
    программных интерфейсов, который можно использовать для создания более
    выразительных API со структурами, состоящими из нескольких вызовов методов.

    Лямбда-выражения с получателями используют вложенную структуру, чтобы
    переопределить порядок разрешения методов в теле лямбда-выражения.

    Параметр, принимаемый лямбда-выражением с получателем, имеет тип
    функции-расширения, и вызывающая функция передает экземпляр получателя
    в вызов лямбда-выражения.

    Преимущество внутренних предметно-ориентированных языков в Kotlin перед
    внешними языками шаблонов или разметки заключается в возможности повторно
    использовать код и создавать абстракции.

    Использование объектов со специальными именами в параметрах инфиксных
    вызовов помогает создавать предметно-ориентированные языки, выражения на
    которых читаются как предложения на английском языке, без лишних знаков.

    Определение расширений для простых типов дает возможность создавать
    удобочитаемые синтаксические конструкции для литералов разного рода,
    таких как даты.

    Соглашение invoke позволяет вызывать произвольные объекты так, как если
    бы они были функциями

    Библиотека kotlinx.html реализует внутренний предметно-ориентированный
    язык для создания HTML-страниц, который легко можно дополнить поддержкой
    фреймворков, предназначенных для создания пользовательских интерфейсов.

    Библиотека kotlintest реализует внутренний предметно-ориентированный язык
    для поддержки удобочитаемых конструкций проверки в модульных тестах.

    Библиотека Exposed реализует внутренний предметно-ориентированный язык для
    работы с базами данных.

    Библиотека Anko реализует несколько разных инструментов для разработки
    Android-приложений, включая внутренний предметно-ориентированый язык для
    определения макетов пользовательских интерфейсов.
